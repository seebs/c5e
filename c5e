#!/usr/bin/ruby -w

# The actual pretty-printing page:
base_template = <<'EOF'
doctype html
html
  head
    title = "The #{name.capitalize}"
    style type="text/css" == css
  body
    .content
      h2 The #{name.capitalize}
      == markdown(flavortext)
      h3 Creating a #{name.capitalize}
      == markdown creating_a
        #{creating_a}
      h4 Quick Build
      == markdown "To create a #{name}, put your best score in \
	#{quick_build[0].capitalize}, your second-best in \
	#{quick_build[1].capitalize}, and take the #{quick_build[2].capitalize} \
	background. #{quick_build_extra || ""}"

    table.classtable
      tr
        th
	th Proficiency
	== feature_headers_before(true)
	th 
	== feature_headers_after(true)
	== casting_headers(true)
      tr
        th Level
	th Bonus
	== feature_headers_before(false)
	th Features
	== feature_headers_after(false)
	== casting_headers(false)
      - for level in (1..20)
        tr
          td.c =level.ordinalize
	  td.c ="+#{proficiency(level)}"
	  == feature_body_before(level - 1)
	  td =features_by_level[level].join(", ")
	  == feature_body_after(level - 1)
	  == casting_body(level - 1)
    .content
      h2 Class Features
      p As a #{name}, you gain the following class features.
      h4 Hit Points
      markdown:
        **Hit Dice:** 1d#{hitdie} per #{name} level  
        **Hit Points at 1st Level:** #{hitdie} + your Constitution modifier  
        **Hit Points at Higher Levels:** 1d#{hitdie} (or #{hitdie_average}) + your Constitution modifier per #{name} level after 1st
      h4 Proficiencies
      markdown:
        **Armor:** #{proficiency_armor.capitalize}  
        **Weapons:** #{proficiency_weapons.capitalize}  
        **Tools:** #{proficiency_tools.capitalize}  
	<br/>
	**Saving Throws:** #{proficiency_saves.titleize}  
	**Skills:** Choose #{proficiency_skills_choose} from #{proficiency_skills_list.map(&:titleize).join(", ")}

      h4 Equipment
      p You start with the following equipment, in addition to the equipment granted by your background:
      ul
        - for item in equipment
          li == markdown(item)
	   
      - for level in (1..20)
        - for feature in features_by_level[level]
	  - if !already_displayed[feature] && features_by_name[feature]
	    - already_displayed[feature] = true
	    h3 =feature
	    == markdown(features_by_name[feature])
	 
      h2 #{archetype_meta.plural.titleize}
      == markdown(archetype_meta.flavortext)
      - archetypes.each_pair do |name, details|
        h3 =name.to_s.titleize
	== markdown(details.flavortext)
	- for feature in details.features
	  - if feature.description
	    h4 = feature.name
	    == markdown(feature.description)
EOF

default_css_data = <<'EOF'
body {
    background-color: #ffffff;
    color: #202020;
    font-family: "Libra Baskerville", Baskerville, serif;
    text-align: left;
}

p {
  margin-bottom: 0.1em;
  margin-top: 0.1em;
}

p+p {
  text-indent: 1em;
}

h2, h3, h4 {
  font-variant: small-caps;
  font-weight: normal;
}

h2 {
  color: #600;
  margin-bottom: 0.1em;
}

h3 {
  color: #600;
  border-bottom: 1px solid;
  margin-bottom: 0.1em;
}

h4 {
  color: #600;
  margin-bottom: 0em;
  margin-top: 0.5em;
}

ul, ol {
  margin-top: 0.5em;
  margin-bottom: 0.5em;
}

a {
    color: #0000a0;
    text-decoration: none;
}

td.c {
  text-align: center;
}

p.hang {
  padding-left: 1em;
  text-indent: -1em;
  margin-bottom: 0em;
  margin-top: 0em;
}

a:active {
    color:  #0000ff;
    text-decoration: underline;
}

a:visited {
    color:  #500090;
}

table.classtable {
  min-width: 50%;
  border-collapse: collapse;
}

table.classtable tr td, th {
  border-color: inherit;
  border-style: none solid;
  padding: 1pt 5pt;
}

table.classtable tr:nth-child(2n+1) {
  background-color: #cccccc;
  border-color: #cccccc;
}

table.classtable tr:nth-child(1), tr:nth-child(2), tr:nth-child(2n) {
  background-color: #ffffff;
  border-color: #ffffff;
}

th {
  text-align: center;
}

a:hover {
    color: #0000ff;
    text-decoration: underline;
}

div.description {
}

div.illo {
    float: right;
    clear: right;
    display: inline;
    margin-left: .1em;
}
EOF

require 'yaml'
require 'slim'
require 'optparse'
require 'ostruct'
require 'redcarpet'
require 'active_support/core_ext/integer/inflections'
require 'titleize'

Slim::Engine.set_default_options pretty: true, sort_attrs: false, tabsize: 8

def note(message)
  STDERR.puts message
end

options = {}

OptionParser.new do |opts|
  opts.banner = "Usage: c5e [-c css] classname"
  opts.on("-cMANDATORY", String, "select css file") do |v|
    options[:css] = v
  end
end.parse!

slim_template = Slim::Template.new { base_template }

if options[:css] then
  default_css_data = begin
    File.read(options[:css])
  rescue Errno::ENOENT
    begin
      File.read(options[:css] + ".css")
    rescue Errno::ENOENT
      note "Couldn't find a css file named '#{options[:css]}'."
      nil
    end
  else
    note "Couldn't find a css file named '#{options[:css]}'."
    nil
  end
end

fields = %i(
  version
  name
  hitdie
  abilityincreases
  casting
  features
  extra_features
  extra_features_after
  proficiency_armor
  proficiency_weapons
  proficiency_skills
  proficiency_saves
  proficiency_tools
  equipment
  flavortext
  creating_a
  quick_build
  quick_build_extra
  archetype_meta
  archetypes
  css
)

def deepstruct(obj)
  if obj.respond_to? :each_index
    obj.each_index do |k|
      v = obj[k]
      if v.respond_to? :each then
        obj[k] = deepstruct(v)
      end
    end
  elsif obj.respond_to? :each_pair
    obj.each_pair do |k,v|
      if v.respond_to? :each then
        obj[k] = deepstruct(v)
      end
    end
    obj = OpenStruct.new(obj)
  end
  obj
end

Struct.new("ClassSpec", *fields)

class Struct::ClassSpec
  @@internal_members = %i(features_by_name features_by_level proficiency_skills_choose proficiency_skills_list hitdie_average already_displayed extra_names extra_details extra_names_after extra_details_after)
  @@internal_members.each do |m| attr_accessor m end
  @@optional_fields = {
    :abilityincreases => true,
    :extra_features => true,
    :extra_features_after => true,
    :quick_build_extra => true,
  }

  @@casting = {
    nil => {
      :max_level => 0,
      :slots => []
    },
    "third" => {
      :max_level => 4, 
      :slots => [
      [],
      [],
      [2],
      [3],
      [3],
      [3],
      [4, 2],
      [4, 2],
      [4, 2],
      [4, 3],
      [4, 3],
      [4, 3],
      [4, 3, 2],
      [4, 3, 2],
      [4, 3, 2],
      [4, 3, 3],
      [4, 3, 3],
      [4, 3, 3],
      [4, 3, 3, 1],
      [4, 3, 3, 1],
      ]
    },
    "half" => {
      :max_level => 5, 
      :slots => [
      [],
      [2],
      [3],
      [3],
      [4, 2],
      [4, 2],
      [4, 3],
      [4, 3],
      [4, 3, 2],
      [4, 3, 2],
      [4, 3, 3],
      [4, 3, 3],
      [4, 3, 3, 1],
      [4, 3, 3, 1],
      [4, 3, 3, 2],
      [4, 3, 3, 2],
      [4, 3, 3, 3, 1],
      [4, 3, 3, 3, 1],
      [4, 3, 3, 3, 2],
      [4, 3, 3, 3, 2],
      ]
    },
    "full" => {
      :max_level => 9, 
      :slots => [
      [2],
      [3],
      [4, 2],
      [4, 3],
      [4, 3, 2],
      [4, 3, 3],
      [4, 3, 3, 1],
      [4, 3, 3, 2],
      [4, 3, 3, 3, 1],
      [4, 3, 3, 3, 2],
      [4, 3, 3, 3, 2, 1],
      [4, 3, 3, 3, 2, 1],
      [4, 3, 3, 3, 2, 1, 1],
      [4, 3, 3, 3, 2, 1, 1],
      [4, 3, 3, 3, 2, 1, 1, 1],
      [4, 3, 3, 3, 2, 1, 1, 1],
      [4, 3, 3, 3, 2, 1, 1, 1, 1],
      [4, 3, 3, 3, 2, 1, 1, 1, 1],
      [4, 3, 3, 3, 2, 2, 1, 1, 1],
      [4, 3, 3, 3, 2, 2, 2, 1, 1],
      ]
    },
  }

  def initialize(filename, hash)
    @filename = filename
    @markdown = Redcarpet::Markdown.new(Redcarpet::Render::XHTML, {})
    missing = []
    extra = []
    # convert everything to allow dots.
    members.each do |m|
      obj = hash[m] || hash[m.to_s]
      hash.delete(m)
      hash.delete(m.to_s)
      if obj then
        send("#{m}=", deepstruct(obj))
      else
	# Special case: We don't want to make you indicate the default.
        missing << m unless @@optional_fields[m]
      end
    end
    @@internal_members.each do |m|
      self.send("#{m}=", hash[m] || hash[m.to_s])
      hash.delete(m)
      hash.delete(m.to_s)
    end
    hash.each do |k,v|
      extra << k
    end
    if !missing.empty?
      note "Missing fields: #{missing.join(', ')}"
    end
    if !extra.empty?
      note "Extra fields: #{extra.join(', ')}"
    end
  end

  def fatal(message)
    note "Fatal error in '#{@filename}': #{message}"
    @failed = true
  end

  def set_default(name, value)
    if !send(name)
      send(name + "=", value)
    end
  end

  def proficiency(n)
    ((n+7)/4).floor
  end

  def markdown(text)
    # yaml helpfully turns blank lines into single line breaks.
    @markdown.render(text.gsub("\n", "\n\n"))
  end

  def casting_headers(top)
    max_level = @@casting[casting][:max_level]
    if max_level > 0 then
      if top then
        return "<th colspan=#{max_level}>&mdash;Spell Slots per Spell Level&mdash;</th>\n"
      else
	(1..max_level).map do |l|
	  "<th>#{l.ordinalize}</th>"
	end.join("\n")
      end
    else
      ""
    end
  end

  def casting_body(level)
    max_level = @@casting[casting][:max_level]
    slots = @@casting[casting][:slots]
    if max_level > 0 and slots[level] then
      s = slots[level]
      (0...max_level).map do |l|
        if s[l] then
	  "<td class='c'>#{s[l]}</td>"
	else
	  "<td class='c'>&mdash;</td>"
	end
      end.join("\n")
    else
      ""
    end
  end

  def feature_headers_before(top)
    if top then
      index = 0
    else
      index = 1
    end
    extra_names.map do |name|
      "<th>#{name[index]}</th>"
    end.join("\n")
  end

  def feature_headers_after(top)
    if top then
      index = 0
    else
      index = 1
    end
    extra_names_after.map do |name|
      "<th>#{name[index]}</th>"
    end.join("\n")
  end

  def feature_body_before(level)
    extra_details.map do |d|
      "<td class='c'>#{d[level] || "&mdash;"}</td>"
    end.join("\n")
  end

  def feature_body_after(level)
    extra_details_after.map do |d|
      "<td class='c'>#{d[level] || "&mdash;"}</td>"
    end.join("\n")
  end

  def feature_cleanup(f)
    f.level = f.level.to_i
    f.name = f.name.titleize
    f.ordinal = f.level.ordinalize
    if f.description
      f.description.gsub!('#{ordinal}', f.ordinal)
    end
  end

  def sanity
    @failed = false
    if !name
      fatal "No name defined."
    end
    if !abilityincreases
      self.abilityincreases = [ 4, 8, 12, 16, 19 ]
    end
    abilityincreases.sort!
    if !hitdie
      fatal "You must specify hit die type (for example, 8 or d8)."
    else
      self.hitdie = hitdie.sub('d', '').to_i
      if !hitdie or hitdie <= 0
        fatal "Hit die must be a positive number."
      end
      self.hitdie_average = (hitdie / 2).floor + 1
    end
    self.features_by_level = Hash.new { |h,k| h[k] = [] }
    self.features_by_name = Hash.new
    features.each do |f|
      feature_cleanup(f)
      features_by_level[f.level] << f.name
      features_by_name[f.name] = f.description
    end
    abilityincreases.each do |level|
      features_by_level[level] << "Ability Score Improvement"
    end
    first = abilityincreases[0]
    last = abilityincreases[-1]
    rest = abilityincreases[1..-2]
    features_by_name['Ability Score Improvement'] = <<EOF
When you reach #{first.ordinalize} level, and again at \
#{rest.map(&:ordinalize).join(", ")}, and #{last.ordinalize} level, \
you can increase one ability score by 2, or two ability scores by 1, \
to a maximum of 20.
EOF
    set_default('proficiency_skills', ["one", "basket-weaving", "exploding"])
    set_default('proficiency_armor', 'none')
    set_default('proficiency_weapons', 'none')
    set_default('proficiency_tools', 'none')
    set_default('proficiency_saves', 'none')
    self.proficiency_skills_choose = proficiency_skills[0]
    self.proficiency_skills_list = proficiency_skills[1..-1].sort
    self.already_displayed = Hash.new
    case casting
    when "third", "full", "half";
      # nothing to do here, otherwise we have to fix up the references
    when "none", nil;
      self.casting = nil
    else
      fatal "Unknown casting specifier #{casting}."
      self.casting = nil
    end
    archetypes.each_pair do |name, a|
      if a.features then
        a.features.each do |f|
          feature_cleanup(f)
        end
      else
        note "Warning: Archetype '#{name}' has no features."
	a.features = []
      end
    end
    self.extra_names = []
    self.extra_details = []
    self.extra_names_after = []
    self.extra_details_after = []
    if extra_features
      extra_features.each_pair do |name, tab|
	words = name.to_s.titleize.split
	# split into two lines
	if words.count > 1 then
	  extra_names << [words[0...words.count/2].join(" "), words[words.count/2..-1].join(" ")]
	else
	  extra_names << ["", words[0]]
	end
	extra_details << tab
      end
    end
    if extra_features_after
      extra_features_after.each_pair do |name, tab|
	words = name.to_s.titleize.split
	# split into two lines
	if words.count > 1 then
	  extra_names_after << [words[0...words.count/2].join(" "), words[words.count/2..-1].join(" ")]
	else
	  extra_names_after << ["", words[0]]
	end
	extra_details_after << tab
      end
    end
    equipment.each_index do |i|
      obj = equipment[i]
      if obj.respond_to? :each_index
        newlist = []
	obj.each_index do |j|
	  o = obj[j]
	  let = 'abcdefghijklmnop'[j]
	  newlist << "*(#{let})* #{o}"
	end
	equipment[i] = newlist.join(", or ")
      end
    end
    !@failed
  end

  def prettyprint(template)
    note "Found data for #{name}"
    htmlname = if @filename['.yaml'] then
      @filename.sub('.yaml', '.html')
    else
      @filename + '.html'
    end
    @htmlfile = File.open(htmlname, "w")
    @htmlfile.puts(template.render(self))
  end
end

ARGV.each do |arg|
  if not File.exist?(arg)
    if File.exist?("#{arg}.yaml")
      arg = "#{arg}.yaml"
    else
      note "Can't open '#{arg}'."
      next
    end
  end
  data = YAML.load_file(arg)
  if data then
    if not data['css']
      data['css'] = default_css_data
    end
    wrapped = Struct::ClassSpec.new(arg, data)
    if wrapped.sanity
      wrapped.prettyprint(slim_template)
    end
  else
    note "Failed to load '#{arg}'."
  end
end
